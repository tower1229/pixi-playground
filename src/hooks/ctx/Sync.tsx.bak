// Copyright 2021-2023 zcloak authors & contributors
// SPDX-License-Identifier: Apache-2.0

import type { Message, MessageType } from '@zcloak/message/types';

import React, { createContext, useContext, useEffect, useState } from 'react';
import { io, Socket } from 'socket.io-client';
import { events } from 'utils';
import { ServerResponse } from 'utils/types';

import { Did } from '@zcloak/did';

import { WS_URL } from '../../constants';
import { ServerMessage } from '../../pages/messages/types';
import { DidCtx } from './Did';
import { SyncState } from './types';

let socket: Socket;

function listenMessage(
  did: Did,
  onConnect: () => void,
  onDisConnect: () => void,
  onMessage: (message: Array<Message<MessageType>>) => void
) {
  socket = io(`${WS_URL}`, {
    transports: ['websocket']
  });

  socket.on('connect', () => {
    onConnect();

    socket.emit('request', {
      method: 'joinRoom',
      receiver: did.getKeyUrl('keyAgreement')
    });
  });

  socket.on('disconnect', () => onDisConnect());

  socket.on('response', (res: ServerResponse<ServerMessage<MessageType> | Array<ServerMessage<MessageType>>>) => {
    if (Array.isArray(res.data)) {
      onMessage(res.data.map((item) => item.rawData));
    } else {
      res.data?.rawData && onMessage([res.data.rawData]);
    }
  });
}

function destroySocket() {
  socket?.close?.();
}

export const SyncCtx = createContext<SyncState>({} as SyncState);

export function SyncRoot({ children }: { children?: React.ReactNode }) {
  const [isSyncing] = useState<boolean>(true);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [syncError] = useState<Error>();
  const { did } = useContext(DidCtx);

  useEffect(() => {
    if (did) {
      listenMessage(
        did,
        () => setIsConnected(true),
        () => setIsConnected(false),
        (messages) => {
          events.emit('new_message', messages);
        }
      );
    }

    return () => destroySocket();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [did?.id]);

  return <SyncCtx.Provider value={{ isSyncing, isConnected, syncError }}>{children}</SyncCtx.Provider>;
}
